"use strict";(self.webpackChunkkube_project_github_io=self.webpackChunkkube_project_github_io||[]).push([[750],{2718:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var o=t(4848),i=t(8453);const r={sidebar_position:1},s="Extending the deployments with network policies",c={id:"extension/networking/network_policies",title:"Extending the deployments with network policies",description:"A Network Policy can regulate what can talk to what.",source:"@site/docs/extension/networking/network_policies.mdx",sourceDirName:"extension/networking",slug:"/extension/networking/network_policies",permalink:"/docs/extension/networking/network_policies",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Networking",permalink:"/docs/category/networking"},next:{title:"Routing inside the Pods",permalink:"/docs/extension/networking/following-a-packet"}},a={},p=[];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"extending-the-deployments-with-network-policies",children:"Extending the deployments with network policies"}),"\n",(0,o.jsxs)(n.p,{children:["A ",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/services-networking/network-policies/",children:"Network Policy"})," can regulate what can talk to what."]}),"\n",(0,o.jsx)(n.p,{children:"Simply put, if you don't want your database to talk to anything other than a specific\nservice, you can use a network policy like this:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: db-network-policy\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: db\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          app: my-app\n    ports:\n    - protocol: TCP\n      port: 5432\n  egress:\n  - to:\n    - podSelector:\n        matchLabels:\n          app: my-app\n    ports:\n    - protocol: TCP\n      port: 5432\n"})}),"\n",(0,o.jsx)(n.p,{children:"to restrict traffict to the database."}),"\n",(0,o.jsxs)(n.admonition,{type:"important",children:[(0,o.jsx)(n.p,{children:"A NetworkPolicy without a Network plugin in the cluster will not do anything."}),(0,o.jsx)(n.p,{children:"A networking plugin is a CNI like calico."}),(0,o.jsxs)(n.p,{children:["Kind has its own CNI implementation using ",(0,o.jsx)(n.code,{children:"kindnet"}),"."]})]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(6540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);